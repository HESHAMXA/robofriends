{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/CounterButton.js","components/Header.js","containers/App.js","action.js","constants.js","registerServiceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","console","log","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","CounterButton","updateCount","setState","state","count","nextProps","nextState","this","color","onClick","Component","Header","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","intialStateSearch","intialStateRobots","rootReducer","createLogger","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"sSAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OACE,yBAAKC,UAAU,uDACb,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBACrB,6BACE,4BAAKF,GACL,2BAAIC,MCeGK,EApBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAElB,OADAC,QAAQC,IAAI,YAEV,6BAEIF,EAAOG,KAAI,SAACC,EAAMC,GAChB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLV,GAAIK,EAAOK,GAAGV,GACdF,KAAMO,EAAOK,GAAGZ,KAChBC,MAAOM,EAAOK,GAAGX,aCEhBa,EAdG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAEhC,OADAR,QAAQC,IAAI,aAEV,yBAAKN,UAAU,OACb,2BACEA,UAAU,mCACVc,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCAHI,EARA,SAACC,GACd,OACE,yBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEJ,EAAMK,WC4BEC,E,kDA9BX,aAAe,IAAD,8BACV,gBAWDC,YAAc,WACV,EAAKC,UAAS,SAAAC,GACV,MAAO,CAAEC,MAAO,EAAKD,MAAMC,MAAQ,OAZ1C,EAAKD,MAAO,CACRC,MAAO,GAHD,E,kEAMQC,EAAWC,GAC7B,OAAGC,KAAKJ,MAAMC,QAAUE,EAAUF,Q,+BAclC,OADAvB,QAAQC,IAAI,iBAER,4BAAQ0B,MAAOD,KAAKb,MAAMc,MAAOC,QAASF,KAAKN,aAA/C,UACaM,KAAKJ,MAAMC,W,GAxBRM,aCkBbC,E,uKAVP,OADA9B,QAAQC,IAAI,UAER,6BACI,kBAAC,EAAD,CAAe0B,MAAO,QAD1B,KAGF,wBAAIhC,UAAU,MAAd,oB,GAXWkC,aCwBfE,G,wLAEFL,KAAKb,MAAMmB,oB,+BAGH,IAAD,EACoDN,KAAKb,MAAxDoB,EADD,EACCA,YAAaC,EADd,EACcA,eAAgBnC,EAD9B,EAC8BA,OAAQoC,EADtC,EACsCA,UACvCC,EAAiBrC,EAAOsC,QAAO,SAAAC,GACnC,OAAQA,EAAM9C,KAAK+C,cAAcC,SAASP,EAAYM,kBAExD,OAAQJ,EACP,uCAEC,yBAAKxC,UAAU,MACd,kBAAC,EAAD,MACC,kBAAC,EAAD,CAAWa,aAAc0B,IACzB,kBAAC,EAAD,KACM,kBAAC,EAAD,CAAUnC,OAAQqC,U,GAjBdP,cAyBHY,eA1CS,SAAAnB,GACtB,MAAO,CACTW,YAAaX,EAAMoB,aAAaT,YAChClC,OAAQuB,EAAMqB,cAAc5C,OAC5BoC,UAAWb,EAAMqB,cAAcR,UAC/BS,MAAOtB,EAAMqB,cAAcC,UAIA,SAACC,GAC1B,MAAO,CACLX,eAAgB,SAACY,GAAD,OAAWD,ECdW,CAClCpC,KCR2B,wBDS3BsC,QDY+CD,EAAME,OAAOC,SAChEjB,gBAAiB,kBAAMa,GCTQ,SAACA,GAClCA,EAAS,CAACpC,KCX2B,2BDYrCyC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIT,EAAS,CAACpC,KCbY,yBDaiBsC,QAASO,OAC7DC,OAAM,SAAAX,GAAK,OAAKC,EAAS,CAACpC,KCbQ,wBDaoBsC,QAAQH,cDkClDH,CAA6CV,GG1CtDyB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTZ,MAAK,SAAAgB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB/C,QACf0C,UAAUC,cAAcO,WAK1BxE,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBsD,OAAM,SAAAX,GACL5C,QAAQ4C,MAAM,4CAA6CA,M,UChE3D6B,EAAoB,CACtBxC,YAAa,IAWTyC,EAAoB,CACxBvC,WAAW,EACXpC,OAAQ,GACR6C,MAAO,ICPL+B,GADSC,yBACKC,YAAgB,CAACnC,aDJT,WAAyC,IAAxCpB,EAAuC,uDAAjCmD,EAAmBK,EAAc,uDAAP,GAC3D,OAAOA,EAAOrE,MACZ,IFZ+B,wBEa7B,OAAOsE,OAAOC,OAAO,GAAI1D,EAAO,CAAEW,YAAa6C,EAAO/B,UACtD,QACE,OAAOzB,ICDoCqB,cDWpB,WAAyC,IAAxCrB,EAAuC,uDAAjCoD,EAAmBI,EAAc,uDAAP,GAC7D,OAAOA,EAAOrE,MACZ,IFxBkC,yBEyBhC,OAAOsE,OAAOC,OAAO,GAAI1D,EAAO,CAAEa,WAAU,IAC7C,IFzBgC,yBE0B9B,OAAO4C,OAAOC,OAAO,GAAI1D,EAAM,CAAEvB,OAAQ+E,EAAO/B,QAASZ,WAAU,IACnE,IF1B6B,wBE2B3B,OAAO4C,OAAOC,OAAO,GAAI1D,EAAO,CAACsB,MAAOkC,EAAO/B,QAASZ,WAAU,IAClE,QACL,OAAOb,OCnBN2D,EAAQC,YAAYP,EAAaQ,YAAgBC,MAIvDC,IAASC,OACM,kBAAC,IAAD,CAAUL,MAAOA,GACjB,kBAAC,EAAD,OAEcM,SAASC,eAAe,SFHtC,WACb,GAA6C,kBAAmBxB,UAAW,CAGzE,GADkB,IAAIyB,IAAIC,eAAwBhC,OAAOC,UAC3CgC,SAAWjC,OAAOC,SAASgC,OAIvC,OAGFjC,OAAOkC,iBAAiB,QAAQ,WAC9B,IAAM7B,EAAK,UAAM2B,eAAN,sBAEPlC,EAwCV,SAAiCO,GAE/Bb,MAAMa,GACHZ,MAAK,SAAAC,GAGkB,MAApBA,EAASyC,SACuD,IAAhEzC,EAAS0C,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7ChC,UAAUC,cAAcgC,MAAM9C,MAAK,SAAAgB,GACjCA,EAAa+B,aAAa/C,MAAK,WAC7BO,OAAOC,SAASwC,eAKpBrC,EAAgBC,MAGnBR,OAAM,WACLvD,QAAQC,IACN,oEA5DAmG,CAAwBrC,GAGxBD,EAAgBC,OEfxBsC,K","file":"static/js/main.10e3697b.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  console.log('CardList');\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  console.log('SearchBox');\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass CounterButton extends Component {\n    constructor() {\n        super();\n        this.state ={\n            count: 0\n        }\n    }\n    shouldComponentUpdate(nextProps, nextState){\n        if(this.state.count !== nextState.count) {\n            return true\n        }\n        return false\n    }\n       updateCount = () => {\n           this.setState(state=> {\n               return { count: this.state.count + 1}\n            \n       });\n    }\n   \n    render(){\n        console.log('CounterButton');\n        return (\n            <button color={this.props.color} onClick={this.updateCount}>\n                 Count: {this.state.count}\n            </button>\n\n        );\n    }\n}\n\nexport default CounterButton;\n\n","import React, {Component} from 'react';\nimport CounterButton  from './CounterButton';\n\nclass Header extends Component {\n    // shouldComponentUpdate(nextProps, nextState){\n    //     return false; \n\n    // }\n    render(){\n        console.log('Header');\n        return(\n            <div>\n                <CounterButton color={'red'} />\n            \n        ) <h1 className='f1'>RoboFriends</h1>\n        </div>\n        );\n    }\n}\n\nexport default Header;\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport Header from '../components/Header';\nimport './App.css';\n\nimport { setSearchField, requestRobots} from '../action';\n\nconst mapStateToProps = state => {\n  return { \nsearchField: state.searchRobots.searchField,\nrobots: state.requestRobots.robots,\nisPending: state.requestRobots.isPending,\nerror: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots()) \n  }\n\n}\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return  robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return  isPending ?\n     <h1>Loading</h1> :\n     (\n      <div className='tc'>\n       <Header />\n        <SearchBox searchChange={onSearchChange}/>\n        <Scroll>\n              <CardList robots={filteredRobots} />\n        </Scroll>\n      </div>\n     );\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD,\n         REQUEST_ROBOTS_PENDEING,\n         REQUEST_ROBOTS_SUCCESS,\n         REQUEST_ROBOTS_FAILED\n  } from './constants.js'\n         \n\nexport const  setSearchField = (text) => ({\n        type: CHANGE_SEARCH_FIELD ,\n        payload: text \n      \n} )\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({type: REQUEST_ROBOTS_PENDEING});\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json())\n  .then(data => dispatch({type:REQUEST_ROBOTS_SUCCESS, payload: data}))\n  .catch(error  => dispatch({type:REQUEST_ROBOTS_FAILED, payload:error}))\n}\n","export const CHANGE_SEARCH_FIELD = \" CHANGE_SEARCH_FIELD \";\n\n\nexport const REQUEST_ROBOTS_PENDEING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_SEARCH_FIELD,\n         REQUEST_ROBOTS_PENDEING,\n         REQUEST_ROBOTS_SUCCESS,\n         REQUEST_ROBOTS_FAILED\n} from './constants.js'\n\nconst intialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=intialStateSearch, action={}) => {\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload});\n      default:\n        return state\n  }\n  }\n  const intialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n    \n  }\n\n  export const requestRobots = (state=intialStateRobots, action={}) => {\n   switch(action.type) {\n     case REQUEST_ROBOTS_PENDEING:\n       return Object.assign({}, state, { isPending:true})\n      case REQUEST_ROBOTS_SUCCESS:\n        return Object.assign({}, state,{ robots: action.payload, isPending:false})\n        case REQUEST_ROBOTS_FAILED:\n          return Object.assign({}, state, {error: action.payload, isPending:false}) \n          default:\n     return state; \n   }\n  }\n          \n   \n  \n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux'; \nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'tachyons';\nimport { searchRobots , requestRobots} from './reducers';\n\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\n\n\nReactDOM.render(\n               <Provider store={store} >\n               <App />\n                \n               </Provider >, document.getElementById('root'));          \nregisterServiceWorker(); \n"],"sourceRoot":""}